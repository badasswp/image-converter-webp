<?php
/**
 * Main Plugin class.
 *
 * This class represents the core of the plugin.
 * It initializes the plugin, manages the singleton instance.
 *
 * @package ImageConverterWebP
 */

namespace WebPImageConverter;

use DOMDocument;
use WebPImageConverter\WebPImageConverter;

class Plugin {
	/**
	 * Plugin instance.
	 *
	 * @since 1.0.0
	 *
	 * @var Plugin
	 */
	protected static $instance;

	/**
	 * Converter Instance.
	 *
	 * @since 1.0.0
	 *
	 * @var WebPImageConverter
	 */
	public WebPImageConverter $converter;

	/**
	 * Source Props.
	 *
	 * @since 1.0.0
	 *
	 * @var mixed[]
	 */
	public static $source;

	/**
	 * Plugin File.
	 *
	 * @since 1.0.2
	 *
	 * @var string
	 */
	public static $file = __FILE__;

	/**
	 * Set up.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function __construct() {
		$this->converter = new WebPImageConverter();
	}

	/**
	 * Get Instance.
	 *
	 * Return singeleton instance for Plugin.
	 *
	 * @since 1.0.0
	 *
	 * @return Plugin
	 */
	public static function get_instance(): Plugin {
		if ( null === static::$instance ) {
			static::$instance = new self();
		}

		return static::$instance;
	}

	/**
	 * Bind to WP.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function run(): void {
		add_action( 'webp_img_convert', [ $this, 'add_webp_meta_to_attachment' ], 10, 2 );
		add_filter( 'attachment_fields_to_edit', [ $this, 'add_webp_attachment_fields' ], 10, 2 );
	}

	/**
	 * Add WebP meta to Attachment.
	 *
	 * This is responsible for creating meta data or logging errors
	 * depending on the conversion result ($webp).
	 *
	 * @since 1.0.2
	 *
	 * @param string|\WP_Error $webp          WebP's relative path.
	 * @param int              $attachment_id Image ID.
	 *
	 * @return void
	 */
	public function add_webp_meta_to_attachment( $webp, $attachment_id ): void {
		if ( ! is_wp_error( $webp ) && ! get_post_meta( $attachment_id, 'webp_img', true ) ) {
			update_post_meta( $attachment_id, 'webp_img', $webp );
		}

		if ( is_wp_error( $webp ) ) {
			wp_insert_post(
				[
					'post_type'    => 'webp_error',
					'post_title'   => 'WebP error log, ID - ' . $attachment_id,
					'post_content' => (string) $webp->get_error_message(),
					'post_status'  => 'publish',
				]
			);
		}
	}

	/**
	 * Get all Images and associated WebPs.
	 *
	 * This function grabs all Image attachments and
	 * associated WebP versions, if any.
	 *
	 * @since 1.0.2
	 * @since 1.0.5 Optimise query using meta_query.
	 *
	 * @return mixed[]
	 */
	protected function get_webp_images(): array {
		$posts = get_posts(
			[
				'post_type'      => 'attachment',
				'posts_per_page' => -1,
				'orderby'        => 'title',
				'meta_query'     => [
					[
						'key'     => 'webp_img',
						'compare' => 'EXISTS',
					],
				],
			]
		);

		if ( ! $posts ) {
			return [];
		}

		$images = array_filter(
			array_map(
				function ( $post ) {
					if ( $post instanceof \WP_Post && wp_attachment_is_image( $post ) ) {
						return [
							'guid' => $post->guid,
							'webp' => (string) ( get_post_meta( (int) $post->ID, 'webp_img', true ) ?? '' ),
						];
					}
					return null;
				},
				$posts
			),
			function ( $item ) {
				return ! is_null( $item );
			}
		);

		return array_values( $images );
	}

	/**
	 * Add attachment fields for WebP image.
	 *
	 * As the name implies, this logic creates a WebP field label
	 * in the WP attachment modal so users can see the path of the image's
	 * generated WebP version.
	 *
	 * @since 1.0.2
	 *
	 * @param mixed[]  $fields Fields Array.
	 * @param \WP_Post $post   WP Post.
	 *
	 * @return mixed[]
	 */
	public function add_webp_attachment_fields( $fields, $post ): array {
		$webp_img = get_post_meta( $post->ID, 'webp_img', true ) ?? '';

		$fields['webp_img'] = [
			'label' => 'WebP Image',
			'input' => 'text',
			'value' => (string) ( is_array( $webp_img ) ? '' : $webp_img ),
			'helps' => 'WebP Image generated by Image Converter for WebP.',
		];

		return $fields;
	}
}
